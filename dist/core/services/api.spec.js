"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var _ = require("lodash");
var Rx = require("rx");
var mock_1 = require("../../api/mock");
var base_1 = require("../components/base");
var component_1 = require("../../tests/component");
describe('mock api', function () {
    it('mocks basic queries', function () {
        var mockApi = new mock_1.MockApi();
        var subscriber = jasmine.createSpy('subscriber');
        mockApi.createResource('collection');
        mockApi.Collection.query().subscribe(subscriber);
        expect(subscriber).toHaveBeenCalledTimes(1);
        expect(subscriber.calls.mostRecent().args[0]).toEqual([]);
        // Add an item.
        mockApi.addItem('collection', { id: 1, name: 'Hello world' });
        expect(subscriber).toHaveBeenCalledTimes(2);
        expect(subscriber.calls.mostRecent().args[0]).toEqual([{ id: 1, name: 'Hello world' }]);
        // Update an item.
        mockApi.updateItem('collection', { id: 1, name: 'Hello mockups' });
        expect(subscriber).toHaveBeenCalledTimes(3);
        expect(subscriber.calls.mostRecent().args[0]).toEqual([{ id: 1, name: 'Hello mockups' }]);
        // Remove an item.
        mockApi.removeItem('collection', 1);
        expect(subscriber).toHaveBeenCalledTimes(4);
        expect(subscriber.calls.mostRecent().args[0]).toEqual([]);
    });
    it('mocks complex queries', function () {
        var mockApi = new mock_1.MockApi();
        var subscriberPlain = jasmine.createSpy('subscriberPlain');
        var subscriberWithFilter = jasmine.createSpy('subscriberWithFilter');
        mockApi.createResource('collection', 'id', function (query, items) {
            if (_.isEmpty(query))
                return items;
            return _.filter(items, function (item) { return item.name === query.name; });
        });
        mockApi.Collection.query().subscribe(subscriberPlain);
        mockApi.Collection.query({ name: 'Hello' }).subscribe(subscriberWithFilter);
        mockApi.addItem('collection', { id: 1, name: 'Collection A' });
        mockApi.addItem('collection', { id: 2, name: 'Another one' });
        mockApi.addItem('collection', { id: 3, name: 'Hello' });
        mockApi.addItem('collection', { id: 4, name: 'Hello world' });
        expect(subscriberPlain).toHaveBeenCalledTimes(5);
        expect(subscriberWithFilter).toHaveBeenCalledTimes(2);
    });
    it('mocks non-query operations', function () {
        var mockApi = new mock_1.MockApi();
        var subscriber = jasmine.createSpy('subscriber');
        mockApi.whenPost('/api/collection', subscriber);
        mockApi.Collection.create({ name: 'Foo' });
        expect(subscriber).toHaveBeenCalledTimes(1);
        expect(subscriber.calls.mostRecent().args[0]).toEqual({});
        expect(subscriber.calls.mostRecent().args[1]).toEqual({ name: 'Foo' });
        mockApi.whenPost(/^\/api\/collection\/(.+?)\/add_data/, subscriber);
        mockApi.Collection.addData(1, [1, 2, 3, 4]);
        expect(subscriber).toHaveBeenCalledTimes(2);
        expect(subscriber.calls.mostRecent().args[1]).toEqual({ ids: [1, 2, 3, 4] });
        expect(subscriber.calls.mostRecent().args[2][1]).toEqual('1');
        mockApi.whenGet('/api/collection/slug_exists', function (parameters, data) {
            return parameters.name === 'hello';
        });
        mockApi.Collection.slugExists('bar').subscribe(subscriber);
        expect(subscriber).toHaveBeenCalledTimes(3);
        expect(subscriber.calls.mostRecent().args[0]).toBe(false);
        mockApi.Collection.slugExists('hello').subscribe(subscriber);
        expect(subscriber).toHaveBeenCalledTimes(4);
        expect(subscriber.calls.mostRecent().args[0]).toBe(true);
    });
    it('supports zip operation', function () {
        var mockApi = new mock_1.MockApi();
        var subscriber = jasmine.createSpy('subscriber');
        mockApi.createResource('collection');
        mockApi.addItem('collection', { id: 1 });
        Rx.Observable.zip(mockApi.Collection.query(), mockApi.Collection.query()).subscribe(subscriber);
        expect(subscriber).toHaveBeenCalledTimes(1);
        expect(subscriber.calls.mostRecent().args[0]).toEqual([[{ id: 1 }], [{ id: 1 }]]);
    });
});
component_1.describeComponent('angular mock api', [], function (tester) {
    var TestComponent = (function (_super) {
        __extends(TestComponent, _super);
        // @ngInject
        TestComponent.$inject = ["$scope", "api"];
        function TestComponent($scope, api) {
            var _this = _super.call(this, $scope) || this;
            _this.subscribe('collection', api.Collection.queryOne());
            return _this;
        }
        return TestComponent;
    }(base_1.ComponentBase));
    TestComponent = __decorate([
        base_1.component({
            module: tester.module,
            directive: 'gen-test-component',
            template: "<div class=\"text-name\">Collection name is {{ctrl.collection.name}}</div>",
        })
    ], TestComponent);
    it('replaces api service', function () {
        tester.api().createResource('collection');
        tester.api().addItem('collection', { id: 1, name: 'Hello world' });
        var component = tester.createComponent(TestComponent.asView().template);
        expect(component.ctrl.collection.id).toBe(1);
        expect(component.ctrl.collection.name).toBe('Hello world');
        expect(component.element.find('.text-name').text()).toBe('Collection name is Hello world');
    });
    it('mocks uploads', function (done) {
        var uploaded = false;
        tester.api().whenUpload(function (data, fileUID) {
            uploaded = true;
            return { data: 'hello' };
        });
        tester.api().upload({}, 'test-uuid').then(function (response) {
            expect(uploaded).toEqual(true);
            expect(response.data).toEqual('hello');
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
