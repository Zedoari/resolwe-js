/*
 * Type definitions
 *
 * Here is defined everything the API returns.
 */
"use strict";
function isResponsePaginated(response) {
    return response.hasOwnProperty('results');
}
exports.isResponsePaginated = isResponsePaginated;
exports.OWNER_PERMISSION = 'owner';
exports.SHARE_PERMISSION = 'share';
exports.EDIT_PERMISSION = 'edit';
exports.DELETE_PERMISSION = 'edit';
exports.ADD_PERMISSION = 'add';
exports.DOWNLOAD_PERMISSION = 'download';
exports.VIEW_PERMISSION = 'view';
exports.PUBLIC_PERMISSION_TYPE = 'public';
exports.GROUP_PERMISSION_TYPE = 'group';
exports.USER_PERMISSION_TYPE = 'user';
exports.RAW_PROCESS_PERSISTENCE = 'RAW';
exports.CACHED_PROCESS_PERSISTENCE = 'CAC';
exports.TEMP_PROCESS_PERSISTENCE = 'TMP';
exports.UPLOADING_DATA_STATUS = 'UP';
exports.RESOLVING_DATA_STATUS = 'RE';
exports.WAITING_DATA_STATUS = 'WT';
exports.PROCESSING_DATA_STATUS = 'PR';
exports.DONE_DATA_STATUS = 'OK';
exports.ERROR_DATA_STATUS = 'ER';
exports.DIRTY_DATA_STATUS = 'DR';

//# sourceMappingURL=data:application/json;charset=utf8;base64,
