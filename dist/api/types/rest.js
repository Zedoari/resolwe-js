/*
 * Type definitions
 *
 * Here is defined everything the API returns.
 */
"use strict";
var _ = require("lodash");
function isResponsePaginated(response) {
    return response.hasOwnProperty('results');
}
exports.isResponsePaginated = isResponsePaginated;
exports.OWNER_PERMISSION = 'owner';
exports.SHARE_PERMISSION = 'share';
exports.EDIT_PERMISSION = 'edit';
exports.DELETE_PERMISSION = 'edit';
exports.ADD_PERMISSION = 'add';
exports.DOWNLOAD_PERMISSION = 'download';
exports.VIEW_PERMISSION = 'view';
exports.PUBLIC_PERMISSION_TYPE = 'public';
exports.GROUP_PERMISSION_TYPE = 'group';
exports.USER_PERMISSION_TYPE = 'user';
exports.RAW_PROCESS_PERSISTENCE = 'RAW';
exports.CACHED_PROCESS_PERSISTENCE = 'CAC';
exports.TEMP_PROCESS_PERSISTENCE = 'TMP';
exports.UPLOADING_DATA_STATUS = 'UP';
exports.RESOLVING_DATA_STATUS = 'RE';
exports.WAITING_DATA_STATUS = 'WT';
exports.PROCESSING_DATA_STATUS = 'PR';
exports.DONE_DATA_STATUS = 'OK';
exports.ERROR_DATA_STATUS = 'ER';
exports.DIRTY_DATA_STATUS = 'DR';
function isData(object) {
    return _.all(['checksum', 'status', 'process', 'process_name', 'process_type', 'input', 'output', 'permissions'], function (property) {
        return object.hasOwnProperty(property);
    });
}
exports.isData = isData;
function isCollection(object) {
    return _.all(['description', 'settings', 'data'], function (property) {
        return object.hasOwnProperty(property);
    });
}
exports.isCollection = isCollection;
function isSampleBase(object) {
    return isCollection(object) && object.hasOwnProperty('descriptor_completed');
}
exports.isSampleBase = isSampleBase;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
