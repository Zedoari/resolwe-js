"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("lodash");
var jQuery = require("jquery");
var Rx = require("rx");
require("jquery.cookie");
var queryobserver_1 = require("./queryobserver");
var errors_1 = require("./errors");
var random = require("../core/utils/random");
/**
 * An concrete implementation of a connection.
 */
var SimpleConnection = /** @class */ (function () {
    /**
     * Constructs a new connection.
     */
    function SimpleConnection() {
        this._sessionId = random.randomUuid();
        this._observable = null;
        this._requestQueue = [];
        this._isConnectedSubject = new Rx.Subject();
        this._errors = new Rx.Subject();
        this._queryObserverManager = new queryobserver_1.QueryObserverManager(this, this._errors);
    }
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.sessionId = function () {
        return this._sessionId;
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.csrfCookie = function () {
        return jQuery.cookie('csrftoken');
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.connect = function (restUri, websocketUri) {
        var _this = this;
        if (this._observable) {
            console.warn("Attempted to connect an already initialized connection.");
            return;
        }
        this._restUri = restUri;
        this._websocketUri = websocketUri;
        this._observable = Rx.Observable.create(function (observer) {
            var reconnect = _.throttle(function () {
                _this._websocket = new WebSocket(_this._websocketUri + _this._sessionId + '?subscribe-broadcast');
                // Register message and error handlers.
                _this._websocket.onmessage = observer.onNext.bind(observer);
                // Don't handle `onerror` because it doesn't provide any useful information
                // https://www.w3.org/TR/websockets/#concept-websocket-close-fail
                _this._websocket.onopen = function () {
                    _this._processRequests();
                    _this._handleIsConnected(true);
                };
                // Register reconnection handler. We reconnect immediately after the socket gets closed.
                _this._websocket.onclose = function (event) {
                    var error = new errors_1.WebsocketError("Websocket error " + event.code, event);
                    _this._errors.onNext(error);
                    reconnect();
                    _this._handleIsConnected(false);
                };
            }, 5000);
            reconnect();
            // There is no way to unsubscribe as we always want to have the socket connected.
            return _.noop;
        }).publish();
        this._disposableConnection = this._observable.connect();
        // Subscribe to item cache updates.
        this.messages().subscribe(this._queryObserverManager.update.bind(this._queryObserverManager));
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.disconnect = function () {
        this._disposableConnection.dispose();
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.isConnected = function () {
        return this._isConnectedSubject;
    };
    /**
     * Notifies isConnected observers.
     *
     * @param isConnected True if connection established
     */
    SimpleConnection.prototype._handleIsConnected = function (isConnected) {
        if (this._isConnected !== isConnected) {
            this._isConnected = isConnected;
            if (!_.isUndefined(this._isConnectedSubject)) {
                this._isConnectedSubject.onNext(this._isConnected);
            }
        }
    };
    /**
     * Performs a request against the remote server. If the connection has not
     * yet been established, the request is queued.
     *
     * @param request Any function, which returns a promise
     * @return A promise, which is fulfilled when the initial promise is
     */
    SimpleConnection.prototype._request = function (request) {
        var _this = this;
        var promise = new Promise(function (resolve, reject) {
            _this._requestQueue.push({
                request: request,
                resolve: resolve,
                reject: reject,
            });
            if (_this._websocket && _this._websocket.readyState === WebSocket.OPEN) {
                _this._processRequests();
            }
        });
        return promise;
    };
    /**
     * Processes any pending requests.
     */
    SimpleConnection.prototype._processRequests = function () {
        if (!this._requestQueue.length) {
            return;
        }
        for (var _i = 0, _a = this._requestQueue; _i < _a.length; _i++) {
            var request = _a[_i];
            request.request().then(request.resolve, request.reject);
        }
        this._requestQueue = [];
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.createUriFromPath = function (path) {
        return this._restUri + path;
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.get = function (path, parameters) {
        var _this = this;
        if (parameters === void 0) { parameters = {}; }
        if (!_.isEmpty(parameters)) {
            path += '?' + jQuery.param(parameters);
        }
        path = this.createUriFromPath(path);
        return Rx.Observable.fromPromise(this._request(function () {
            var jQueryXHR = jQuery.ajax({
                type: 'get',
                url: path,
                contentType: 'application/json',
                xhrFields: {
                    withCredentials: true,
                },
            });
            _this._interceptErrors(jQueryXHR);
            return jQueryXHR;
        }));
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.post = function (path, data, parameters) {
        if (parameters === void 0) { parameters = {}; }
        return this._update('POST', path, data, parameters);
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.put = function (path, data, parameters) {
        if (parameters === void 0) { parameters = {}; }
        return this._update('PUT', path, data, parameters);
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.patch = function (path, data, parameters) {
        if (parameters === void 0) { parameters = {}; }
        return this._update('PATCH', path, data, parameters);
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.delete = function (path, data, parameters) {
        if (parameters === void 0) { parameters = {}; }
        return this._update('DELETE', path, data, parameters);
    };
    /**
     * Performs a REST API request against the genesis platform backend.
     *
     * @param method Request method
     * @param path Request path
     * @param data Request body
     * @param parameters Request parameters
     * @return An observable that emits the response
     */
    SimpleConnection.prototype._update = function (method, path, data, parameters) {
        var _this = this;
        if (parameters === void 0) { parameters = {}; }
        if (!_.isEmpty(parameters)) {
            path += '?' + jQuery.param(parameters);
        }
        path = this.createUriFromPath(path);
        return Rx.Observable.fromPromise(this._request(function () {
            var jQueryXHR = jQuery.ajax({
                type: method,
                url: path,
                data: JSON.stringify(data),
                contentType: 'application/json',
                xhrFields: {
                    withCredentials: true,
                },
                beforeSend: function (xhr, settings) {
                    xhr.setRequestHeader('X-CSRFToken', _this.csrfCookie());
                },
            });
            _this._interceptErrors(jQueryXHR);
            return jQueryXHR;
        }));
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.messages = function () {
        return this._observable.map(function (event) {
            return JSON.parse(event.data);
        }).filter(function (data) { return data.msg; }).map(function (data) {
            return {
                msg: data.msg,
                observer: data.observer,
                primary_key: data.primary_key,
                order: data.order,
                item: data.item,
            };
        });
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.errors = function () {
        return this._errors;
    };
    /**
     * @inheritdoc
     */
    SimpleConnection.prototype.queryObserverManager = function () {
        return this._queryObserverManager;
    };
    /**
     * Checks XHR and notifies error observers.
     */
    SimpleConnection.prototype._interceptErrors = function (xhr) {
        var _this = this;
        xhr.then(function (response) {
            if (_.has(response, 'error')) {
                var error = new errors_1.APIError(response['error'], response);
                _this._errors.onNext(error);
            }
        });
        xhr.fail(function (jqXHR, textStatus, errorThrown) {
            if (500 <= jqXHR.status && jqXHR.status < 600) {
                var error = new errors_1.APIError(errorThrown, jqXHR);
                _this._errors.onNext(error);
            }
        });
    };
    return SimpleConnection;
}());
exports.SimpleConnection = SimpleConnection;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
