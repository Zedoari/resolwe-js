"use strict";
var base_1 = require("./base");
var auth_1 = require("./auth");
var rest_resource_1 = require("./resources/rest/rest_resource");
var collection_1 = require("./resources/rest/collection");
var sample_1 = require("./resources/rest/sample");
var data_1 = require("./resources/rest/data");
var descriptor_schema_1 = require("./resources/rest/descriptor_schema");
var user_1 = require("./resources/rest/user");
var file_1 = require("./resources/rest/file");
var storage_1 = require("./resources/rest/storage");
var knowledge_base_1 = require("./resources/modules/knowledge_base");
var ResolweApi = (function () {
    function ResolweApi(connection, restUri, websocketUri) {
        this.connection = connection;
        this.Base = new base_1.Base(this.connection);
        this.Auth = new auth_1.Auth(this.connection);
        // Resolwe resources.
        this.User = new user_1.UserResource(this.connection);
        this.Collection = new collection_1.CollectionResource(this.connection);
        this.Data = new data_1.DataResource(this.connection);
        this.Process = new rest_resource_1.RESTResource('process', this.connection);
        this.DescriptorSchema = new descriptor_schema_1.DescriptorSchemaResource(this.connection);
        this.Sample = new sample_1.SampleResource(this.connection);
        this.File = new file_1.FileResource(this.connection);
        this.Storage = new storage_1.StorageResource(this.connection);
        this.KnowledgeBase = {
            Feature: new knowledge_base_1.FeatureResource(this.connection),
        };
        this.connect(restUri, websocketUri);
        this.Base.getCSRFCookie();
    }
    /**
     * Establishes a default connection with the genesis platform server.
     *
     * @param {string} uri Genesis platform server URI
     */
    ResolweApi.prototype.connect = function (restUri, websocketUri) {
        this.connection.connect(restUri, websocketUri);
    };
    return ResolweApi;
}());
exports.ResolweApi = ResolweApi;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLCtCQUE0QjtBQUM1QiwrQkFBNEI7QUFFNUIsZ0VBQTREO0FBQzVELDBEQUErRDtBQUMvRCxrREFBdUQ7QUFDdkQsOENBQW1EO0FBQ25ELHdFQUE0RTtBQUM1RSw4Q0FBbUQ7QUFDbkQsOENBQW1EO0FBQ25ELG9EQUF5RDtBQUN6RCxxRUFBbUU7QUFJbkU7SUFrQkksb0JBQW1CLFVBQXNCLEVBQUUsT0FBZSxFQUFFLFlBQW9CO1FBQTdELGVBQVUsR0FBVixVQUFVLENBQVk7UUFqQmxDLFNBQUksR0FBUyxJQUFJLFdBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsU0FBSSxHQUFTLElBQUksV0FBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUU5QyxxQkFBcUI7UUFDZCxTQUFJLEdBQWlCLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsZUFBVSxHQUF1QixJQUFJLCtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RSxTQUFJLEdBQWlCLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsWUFBTyxHQUFnQyxJQUFJLDRCQUFZLENBQWdCLFNBQVMsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkcscUJBQWdCLEdBQTZCLElBQUksNENBQXdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQzNGLFdBQU0sR0FBbUIsSUFBSSx1QkFBYyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM3RCxTQUFJLEdBQWlCLElBQUksbUJBQVksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkQsWUFBTyxHQUFvQixJQUFJLHlCQUFlLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRWhFLGtCQUFhLEdBQUc7WUFDbkIsT0FBTyxFQUFFLElBQUksZ0NBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ2hELENBQUM7UUFHRSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsQ0FBQztRQUVwQyxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssNEJBQU8sR0FBZixVQUFnQixPQUFlLEVBQUUsWUFBb0I7UUFDakQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFDTCxpQkFBQztBQUFELENBaENBLEFBZ0NDLElBQUE7QUFoQ1ksZ0NBQVUiLCJmaWxlIjoiYXBpL2luZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb25uZWN0aW9ufSBmcm9tICcuL2Nvbm5lY3Rpb24nO1xyXG5pbXBvcnQge0Jhc2V9IGZyb20gJy4vYmFzZSc7XHJcbmltcG9ydCB7QXV0aH0gZnJvbSAnLi9hdXRoJztcclxuXHJcbmltcG9ydCB7UkVTVFJlc291cmNlfSBmcm9tICcuL3Jlc291cmNlcy9yZXN0L3Jlc3RfcmVzb3VyY2UnO1xyXG5pbXBvcnQge0NvbGxlY3Rpb25SZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZXMvcmVzdC9jb2xsZWN0aW9uJztcclxuaW1wb3J0IHtTYW1wbGVSZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZXMvcmVzdC9zYW1wbGUnO1xyXG5pbXBvcnQge0RhdGFSZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZXMvcmVzdC9kYXRhJztcclxuaW1wb3J0IHtEZXNjcmlwdG9yU2NoZW1hUmVzb3VyY2V9IGZyb20gJy4vcmVzb3VyY2VzL3Jlc3QvZGVzY3JpcHRvcl9zY2hlbWEnO1xyXG5pbXBvcnQge1VzZXJSZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZXMvcmVzdC91c2VyJztcclxuaW1wb3J0IHtGaWxlUmVzb3VyY2V9IGZyb20gJy4vcmVzb3VyY2VzL3Jlc3QvZmlsZSc7XHJcbmltcG9ydCB7U3RvcmFnZVJlc291cmNlfSBmcm9tICcuL3Jlc291cmNlcy9yZXN0L3N0b3JhZ2UnO1xyXG5pbXBvcnQge0ZlYXR1cmVSZXNvdXJjZX0gZnJvbSAnLi9yZXNvdXJjZXMvbW9kdWxlcy9rbm93bGVkZ2VfYmFzZSc7XHJcblxyXG5pbXBvcnQgKiBhcyB0eXBlcyBmcm9tICcuL3R5cGVzL3Jlc3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJlc29sd2VBcGkge1xyXG4gICAgcHVibGljIEJhc2U6IEJhc2UgPSBuZXcgQmFzZSh0aGlzLmNvbm5lY3Rpb24pO1xyXG4gICAgcHVibGljIEF1dGg6IEF1dGggPSBuZXcgQXV0aCh0aGlzLmNvbm5lY3Rpb24pO1xyXG5cclxuICAgIC8vIFJlc29sd2UgcmVzb3VyY2VzLlxyXG4gICAgcHVibGljIFVzZXI6IFVzZXJSZXNvdXJjZSA9IG5ldyBVc2VyUmVzb3VyY2UodGhpcy5jb25uZWN0aW9uKTtcclxuICAgIHB1YmxpYyBDb2xsZWN0aW9uOiBDb2xsZWN0aW9uUmVzb3VyY2UgPSBuZXcgQ29sbGVjdGlvblJlc291cmNlKHRoaXMuY29ubmVjdGlvbik7XHJcbiAgICBwdWJsaWMgRGF0YTogRGF0YVJlc291cmNlID0gbmV3IERhdGFSZXNvdXJjZSh0aGlzLmNvbm5lY3Rpb24pO1xyXG4gICAgcHVibGljIFByb2Nlc3M6IFJFU1RSZXNvdXJjZTx0eXBlcy5Qcm9jZXNzPiA9IG5ldyBSRVNUUmVzb3VyY2U8dHlwZXMuUHJvY2Vzcz4oJ3Byb2Nlc3MnLCB0aGlzLmNvbm5lY3Rpb24pO1xyXG4gICAgcHVibGljIERlc2NyaXB0b3JTY2hlbWE6IERlc2NyaXB0b3JTY2hlbWFSZXNvdXJjZSA9IG5ldyBEZXNjcmlwdG9yU2NoZW1hUmVzb3VyY2UodGhpcy5jb25uZWN0aW9uKTtcclxuICAgIHB1YmxpYyBTYW1wbGU6IFNhbXBsZVJlc291cmNlID0gbmV3IFNhbXBsZVJlc291cmNlKHRoaXMuY29ubmVjdGlvbik7XHJcbiAgICBwdWJsaWMgRmlsZTogRmlsZVJlc291cmNlID0gbmV3IEZpbGVSZXNvdXJjZSh0aGlzLmNvbm5lY3Rpb24pO1xyXG4gICAgcHVibGljIFN0b3JhZ2U6IFN0b3JhZ2VSZXNvdXJjZSA9IG5ldyBTdG9yYWdlUmVzb3VyY2UodGhpcy5jb25uZWN0aW9uKTtcclxuXHJcbiAgICBwdWJsaWMgS25vd2xlZGdlQmFzZSA9IHtcclxuICAgICAgICBGZWF0dXJlOiBuZXcgRmVhdHVyZVJlc291cmNlKHRoaXMuY29ubmVjdGlvbiksXHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25uZWN0aW9uOiBDb25uZWN0aW9uLCByZXN0VXJpOiBzdHJpbmcsIHdlYnNvY2tldFVyaTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy5jb25uZWN0KHJlc3RVcmksIHdlYnNvY2tldFVyaSk7XHJcblxyXG4gICAgICAgIHRoaXMuQmFzZS5nZXRDU1JGQ29va2llKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFc3RhYmxpc2hlcyBhIGRlZmF1bHQgY29ubmVjdGlvbiB3aXRoIHRoZSBnZW5lc2lzIHBsYXRmb3JtIHNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJpIEdlbmVzaXMgcGxhdGZvcm0gc2VydmVyIFVSSVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNvbm5lY3QocmVzdFVyaTogc3RyaW5nLCB3ZWJzb2NrZXRVcmk6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuY29ubmVjdGlvbi5jb25uZWN0KHJlc3RVcmksIHdlYnNvY2tldFVyaSk7XHJcbiAgICB9XHJcbn1cclxuIl19
